// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id       String  @id @default(cuid())
  name     String?
  email    String? @unique
  phone    String? @unique
  userType String  @default("user") @map(name: "user_type")
  password String? @default("123456")

  phoneConfirmed Boolean   @default(false)
  emailConfirmed Boolean   @default(false)
  emailVerified  DateTime?
  image          String?

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  accounts  Account[]
  sessions  Session[]
  services  Service[]

  providerContracts Contract[] @relation("providerContracts")
  userContracts     Contract[] @relation("userContracts")

  contractMessages Message[]

  @@map(name: "users")
}

model Service {
  id          String @id @default(cuid())
  title       String
  description String
  value       Int

  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId Int

  serviceClass String   @map(name: "service_class")
  validTo      DateTime @map(name: "valid_to ")
  validFrom    DateTime @map(name: "valid_from")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  provider   User   @relation(fields: [providerId], references: [id])
  providerId String

  contracts Contract[]

  @@map(name: "services")
}

model ServiceType {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  services    Service[]

  @@map(name: "service_types")
}

model Log {
  id           Int      @id @default(autoincrement())
  event        String
  eventDate    DateTime @map(name: "event_date")
  subject      String
  data         String
  userId       String   @map(name: "user_id")
  userProvider String   @map(name: "user_provider")

  @@map("log")
}

model Contract {
  id             Int    @id @default(autoincrement())
  contractStatus String @default("open") @map("contract_status")
  value          Int

  service          Service @relation(fields: [serviceId], references: [id])
  serviceId        String  @map("service_id")
  userProvider     User?   @relation(name: "providerContracts", fields: [userProviderId], references: [id])
  userProviderId   String  @map("user_provider_id")
  userContractor   User?   @relation(name: "userContracts", fields: [userContractorId], references: [id])
  userContractorId String  @map("user_contractor_id")

  createDate    DateTime  @default(now()) @map("create_date")
  dueDate       DateTime? @map("due_date")
  executionDate DateTime? @map("execution_date")
  closingDate   DateTime? @map("closing_date")

  serviceProvided  Boolean? @map("service_provided")
  serviceReviewed  Boolean? @map("service_reviewd")
  providerAgreed   Boolean? @map("provider_agreed")
  contractorAgreed Boolean? @map("contractor_agreed")

  messages Message[]
  reviews  Review[]

  @@map("contract")
}

model Message {
  id Int @id @default(autoincrement())

  contract   Contract @relation(fields: [contractId], references: [id])
  contractId Int

  userFrom   User   @relation(fields: [userFromId], references: [id])
  userFromId String

  messageDate DateTime
  text        String
  messageRead Boolean

  @@map("message")
}

model Review {
  id Int @id @default(autoincrement())

  contract   Contract @relation(fields: [contractId], references: [id])
  contractId Int

  title      String
  text       String
  reviewDate DateTime
  score      Int

  @@map("review")
}
